digraph "classes_SMPyBandits.Environment" {
charset="utf-8"
rankdir=BT
"0" [label="{SMPyBandits.Environment.Evaluator.Evaluator|_times\lallPulls : dict\lallRewards\lappend_labels\laverageOn : float\lbestArmPulls : dict\lcache_rewards\lcfg\lchange_labels\ldelta_t_plot\lenvironment_bayesian\lenvs : list\lfinalRanksOnAverage : bool\lhorizon\llastCumRewards\llastPulls : dict\lmaxCumRewards\lmemoryConsumption : dict\lminCumRewards\lmoreAccurate : bool\lnbPolicies\lnb_break_points\lnumberOfCPDetections : dict\lplot_lowerbound\lpolicies : list\lpulls : dict\lrandom_invert\lrandom_shuffle\lrepetitions\lrewards\lrewardsSquared\lrunningTimes : dict\lshowplot\lsignature : str\luseJoblib\luseJoblibForPolicies : bool\luse_box_plot\l|__initEnvironments__()\l__initPolicies__()\l__init__()\l_xlabel()\lcompute_cache_rewards()\lgetAllLastWeightedSelections()\lgetAverageRewards()\lgetAverageWeightedSelections()\lgetBestArmPulls()\lgetCumulatedRegret()\lgetCumulatedRegret_LessAccurate()\lgetCumulatedRegret_MoreAccurate()\lgetLastRegrets()\lgetLastRegrets_LessAccurate()\lgetLastRegrets_MoreAccurate()\lgetMaxMinReward()\lgetMaxRewards()\lgetMemoryConsumption()\lgetNumberOfCPDetections()\lgetPulls()\lgetRewards()\lgetRewardsSquared()\lgetRunningTimes()\lgetSTDRegret()\lplotBestArmPulls()\lplotHistoryOfMeans()\lplotLastRegrets()\lplotMemoryConsumption()\lplotNumberOfCPDetections()\lplotRegrets()\lplotRunningTimes()\lprintFinalRanking()\lprintLastRegrets()\lprintMemoryConsumption()\lprintNumberOfCPDetections()\lprintRunningTimes()\lsaveondisk()\lstartAllEnv()\lstartOneEnv()\l}", shape="record"];
"1" [label="{SMPyBandits.Environment.EvaluatorMultiPlayers.EvaluatorMultiPlayers|_times\lallPulls : dict\lappend_labels\laverageOn\lbestArmPulls : dict\lcfg\lchange_labels\lcollisionModel\lcollisions : dict\lcount_ranks_markov_chain\ldelta_t_plot\lenvs : list\lfinalRanksOnAverage\lfreeTransmissions : dict\lfull_lost_if_collision\lhorizon : int\llastCumCollisions : dict\llastCumRewards : dict\llastPulls : dict\lmemoryConsumption : dict\lmoreAccurate : bool\lnbPlayers\lnbSwitchs : dict\lnb_break_points\lplayers : list\lplot_lowerbounds\lpulls : dict\lrepetitions\lrewards : dict\lrunningTimes : dict\lshowplot\lsignature : str\luseJoblib\luse_box_plot\l|__initEnvironments__()\l__initPlayers__()\l__init__()\lgetAllLastWeightedSelections()\lgetAllPulls()\lgetBestArmPulls()\lgetCentralizedNbSwitchs()\lgetCentralizedRegret()\lgetCentralizedRegret_LessAccurate()\lgetCentralizedRegret_MoreAccurate()\lgetCollisions()\lgetFirstRegretTerm()\lgetLastRegrets()\lgetLastRegrets_LessAccurate()\lgetLastRegrets_MoreAccurate()\lgetMemoryConsumption()\lgetNbSwitchs()\lgetPulls()\lgetRegretMean()\lgetRewards()\lgetRunningTimes()\lgetSecondRegretTerm()\lgetThirdRegretTerm()\lgetfreeTransmissions()\lloadfromdisk()\lplotAllPulls()\lplotBestArmPulls()\lplotFairness()\lplotFreeTransmissions()\lplotFrequencyCollisions()\lplotHistoryOfMeans()\lplotLastRegrets()\lplotMemoryConsumption()\lplotNbCollisions()\lplotNbSwitchs()\lplotNbSwitchsCentralized()\lplotRegretCentralized()\lplotRewards()\lplotRunningTimes()\lprintFinalRanking()\lprintFinalRankingAll()\lprintLastRegrets()\lprintLastRegretsPM()\lprintMemoryConsumption()\lprintRunningTimes()\lsaveondisk()\lstartAllEnv()\lstartOneEnv()\lstrPlayers()\l}", shape="record"];
"2" [label="{SMPyBandits.Environment.EvaluatorSparseMultiPlayers.EvaluatorSparseMultiPlayers|activations\lcollisionModel\lfull_lost_if_collision\lplayers : list\l|__init__()\lgetAllLastWeightedSelections()\lgetCentralizedRegret()\lgetCentralizedRegret_LessAccurate()\lgetCentralizedRegret_MoreAccurate()\lgetFirstRegretTerm()\lgetLastRegrets()\lgetLastRegrets_LessAccurate()\lgetLastRegrets_MoreAccurate()\lgetSecondRegretTerm()\lgetThirdRegretTerm()\lstartOneEnv()\lstrPlayers()\l}", shape="record"];
"3" [label="{SMPyBandits.Environment.MAB.ChangingAtEachRepMAB|_arms\l_historyOfMeans : list\l_sparsity : NoneType\l_t : int\l_verbose : bool\largs\larm_type\larms\lisChangingAtEachRepetition : bool\lisDynamic : bool\lisMarkovian : bool\lmaxArm\lmeans\lminArm\lnbArms\lnewMeans\l|Mbest()\lMworst()\l__init__()\l__repr__()\lhoifactor()\llowerbound()\llowerbound_multiplayers()\lnewRandomArms()\lreprarms()\l}", shape="record"];
"4" [label="{SMPyBandits.Environment.MAB.IncreasingMAB|_amplitudes : list, recarray\l_change_lower_amplitude\l_first_amplitudes : list, recarray\l_first_lowers : list, recarray\l_lowers : list, recarray\lisDynamic : bool\l|__init__()\ldraw()\l}", shape="record"];
"5" [label="{SMPyBandits.Environment.MAB.MAB|_sparsity : NoneType\larms : list\lisChangingAtEachRepetition : bool\lisDynamic : bool\lisMarkovian : bool\lmaxArm\lmeans : recarray\lminArm\lnbArms\lsparsity\l|Mbest()\lMworst()\l__init__()\l__repr__()\ldraw()\ldraw_each()\ldraw_each_nparray()\ldraw_nparray()\lget_allMeans()\lget_maxArm()\lget_maxArms()\lget_minArm()\lhoifactor()\llowerbound()\llowerbound_multiplayers()\llowerbound_sparse()\lnew_order_of_arm()\lplotComparison_our_anandkumar()\lplotHistogram()\lreprarms()\lstr_sparsity()\lsumBestMeans()\lupperbound_collisions()\l}", shape="record"];
"6" [label="{SMPyBandits.Environment.MAB.MarkovianMAB|_sparsity : NoneType\larms\lchains\ldict_transitions : list\lisChangingAtEachRepetition : bool\lisDynamic : bool\lisMarkovian : bool\lmatrix_transitions : list\lmaxArm\lmeans : recarray\lminArm\lnbArms\lrested\lstates\lsteadys\l|__init__()\l__repr__()\ldraw()\lreprarms()\l}", shape="record"];
"7" [label="{SMPyBandits.Environment.MAB.NonStationaryMAB|_arms\l_historyOfChangePoints : list\l_historyOfMeans : dict\l_sparsity : NoneType\l_t : int\l_verbose : bool\largs\larm_type\lchangePoints\lisChangingAtEachRepetition : bool\lisDynamic : bool\lisMarkovian : bool\lnbArms\lnewMeans\lonlyOneArm\l|__init__()\lget_allMeans()\lget_maxArm()\lget_minArm()\lnewRandomArms()\lreprarms()\l}", shape="record"];
"8" [label="{SMPyBandits.Environment.MAB.PieceWiseStationaryMAB|_sparsity : NoneType\l_verbose : bool\larm_type\larms\lchangePoints\lcurrentInterval : int\lisChangingAtEachRepetition : bool\lisDynamic : bool\lisMarkovian : bool\llistOfArms\llistOfMeans : recarray\lmaxArm\lmeans\lminArm\lnbArms\l|__init__()\l__repr__()\lget_allMeans()\lget_maxArm()\lget_maxArms()\lget_minArm()\lget_minArms()\lnewRandomArms()\lplotHistoryOfMeans()\lreprarms()\l}", shape="record"];
"9" [label="{SMPyBandits.Environment.Result.Result|choices\lindexes_bestarm\lmemory_consumption : int\lnumber_of_cp_detections : int\lpulls\lrewards\lrunning_time : int\l|__init__()\lchange_in_arms()\lstore()\l}", shape="record"];
"10" [label="{SMPyBandits.Environment.ResultMultiPlayers.ResultMultiPlayers|allPulls\lchoices\lcollisions\lmemory_consumption : int\lpulls\lrewards\lrunning_time : int\l|__init__()\lstore()\l}", shape="record"];
"11" [label="{SMPyBandits.Environment.pykov.Chain|_fundamental_matrix\l_guess\l_steady\l|absorbing_time()\labsorbing_tour()\laccessibility_matrix()\ladjacency()\lcommunicates()\lcommunication_classes()\lentropy()\lfundamental_matrix()\lis_accessible()\lkemeny_constant()\lmfpt_to()\lmixing_time()\lmove()\lpow()\lsteady()\lwalk()\lwalk_probability()\l}", shape="record"];
"12" [label="{SMPyBandits.Environment.pykov.Matrix|_pred : OrderedDict\l_states : set\l_succ : OrderedDict\l|_UMPFPACKSolve()\l__add__()\l__delitem__()\l__getitem__()\l__init__()\l__mul__()\l__pow__()\l__reduce__()\l__rmul__()\l__setitem__()\l__sub__()\l_dok_()\l_el2pos_()\l_from_dok_()\l_from_numpy_mat()\l_numpy_mat()\lclear()\lcopy()\leye()\lones()\lpop()\lpopitem()\lpow()\lpred()\lremove()\lsetdefault()\lstates()\lstochastic()\lsucc()\ltrace()\ltranspose()\lupdate()\l}", shape="record"];
"13" [fontcolor="red", label="{SMPyBandits.Environment.pykov.PykovError|value\l|__init__()\l__str__()\l}", shape="record"];
"14" [label="{SMPyBandits.Environment.pykov.Vector|\l|__add__()\l__getitem__()\l__init__()\l__mul__()\l__rmul__()\l__setitem__()\l__sub__()\l_fromarray()\l_toarray()\lchoose()\lcopy()\ldist()\lentropy()\lnormalize()\lrelative_entropy()\lsort()\lsum()\l}", shape="record"];
"2" -> "1" [arrowhead="empty", arrowtail="none"];
"3" -> "5" [arrowhead="empty", arrowtail="none"];
"4" -> "5" [arrowhead="empty", arrowtail="none"];
"6" -> "5" [arrowhead="empty", arrowtail="none"];
"7" -> "8" [arrowhead="empty", arrowtail="none"];
"8" -> "5" [arrowhead="empty", arrowtail="none"];
"11" -> "12" [arrowhead="empty", arrowtail="none"];
"12" -> "11" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_fundamental_matrix", style="solid"];
"14" -> "11" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_steady", style="solid"];
"14" -> "11" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_guess", style="solid"];
}
